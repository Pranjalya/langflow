from alembic import op
import sqlalchemy as sa
import sqlmodel # Required for SQLModel compatibility

# revision identifiers, used by Alembic.
revision = 'PLACEHOLDER_REVISION_ID' # User will need to replace this
down_revision = 'PREVIOUS_REVISION_ID' # User will need to replace this with the actual previous revision
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Enum types are defined in the model with specific names, ensure these match
    # SQLModel generates these names like: f"{enum_class.__name__.lower()}"
    # However, in our UserResourcePermission model, we have:
    # resource_type: ResourceTypeEnum = Field(sa_column=SQLEnum(ResourceTypeEnum, name="resource_type_enum_permission"), index=True)
    # permission: PermissionTypeEnum = Field(sa_column=SQLEnum(PermissionTypeEnum, name="permission_type_enum_permission"))
    # So, the names "resource_type_enum_permission" and "permission_type_enum_permission" should be used.

    resource_type_enum = sa.Enum('Folder', 'Flow', name='resource_type_enum_permission')
    permission_type_enum = sa.Enum('READ', 'WRITE', 'RUN', 'OWNER', name='permission_type_enum_permission')
    
    # It's safer to create enums if they don't exist, or ensure they are created if not using op.create_table's inline creation
    # For some backends, creating them explicitly first is better.
    # resource_type_enum.create(op.get_bind(), checkfirst=True)
    # permission_type_enum.create(op.get_bind(), checkfirst=True)

    op.create_table('userresourcepermission',
        sa.Column('id', sa.UUID(), nullable=False), # Explicitly use sa.UUID() for Alembic
        sa.Column('user_id', sa.UUID(), nullable=False),
        sa.Column('resource_id', sa.UUID(), nullable=False),
        sa.Column('resource_type', resource_type_enum, nullable=False),
        sa.Column('permission', permission_type_enum, nullable=False),
        # Using server_default with sa.text for created_at and updated_at for database-side defaults
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), onupdate=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='fk_userresourcepermission_user_id_user'), # Added constraint name
        sa.PrimaryKeyConstraint('id', name='pk_userresourcepermission'), # Added constraint name
        sa.UniqueConstraint('user_id', 'resource_id', 'resource_type', 'permission', name='uix_user_resource_permission')
    )
    op.create_index(op.f('ix_userresourcepermission_resource_id'), 'userresourcepermission', ['resource_id'], unique=False)
    op.create_index(op.f('ix_userresourcepermission_resource_type'), 'userresourcepermission', ['resource_type'], unique=False)
    op.create_index(op.f('ix_userresourcepermission_user_id'), 'userresourcepermission', ['user_id'], unique=False)
    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_userresourcepermission_user_id'), table_name='userresourcepermission')
    op.drop_index(op.f('ix_userresourcepermission_resource_type'), table_name='userresourcepermission')
    op.drop_index(op.f('ix_userresourcepermission_resource_id'), table_name='userresourcepermission')
    op.drop_table('userresourcepermission')
    
    # Drop Enum types if they were explicitly created and are not tied to the table definition in a way that
    # op.drop_table handles them. For PostgreSQL, enums are separate types and need explicit dropping.
    # For SQLite, enums are usually constraints and don't need separate dropping.
    # Assuming they might need to be dropped for robustness:
    # resource_type_enum = sa.Enum('Folder', 'Flow', name='resource_type_enum_permission')
    # resource_type_enum.drop(op.get_bind(), checkfirst=True)
    # permission_type_enum = sa.Enum('READ', 'WRITE', 'RUN', 'OWNER', name='permission_type_enum_permission')
    # permission_type_enum.drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
